{"changed":false,"filter":false,"title":"sensor.js","tooltip":"/sensor.js","value":"// Require AWS IoT Device SDK\nconst awsIoT = require('aws-iot-device-sdk');\n// Require crypto for random numbers generation\nconst crypto = require('crypto');\n\n//var path = require(\"path\")\nvar locations = require(\"./locations.json\")\nvar params = require(\"./params.json\")\nvar curves = require(\"./curves.js\")\nvar utils = require(\"./utils.js\")\nvar chargers = require(\"./chargers.js\")\nvar datagenerator = require(\"./datagenerator.js\")\nvar values=[];\n\nmodule.exports.start = function(simTime, sensorName, device, recharge){\n  device.clientId = sensorName\n  device.on('connect', function() {\n    console.log(sensorName,'Connected to AWS IoT');\n    // subscribing to sensor's topic\n    device.subscribe(\"body4/\"+sensorName);\n  });\n  \n  device.on('message', function(topic, message) {\n    //forward other sensor's data to sink\n    send(message)\n  });\n  \n  var myParams = params[sensorName]\n  myParams.battery = myParams.batteryCapacity\n  var reading = 0\n  var topic = \"sink\"\n  \n  console.log(`starting sensor ${sensorName}`)\n \n  read()\n  sendReading()\n  \n  function send(data){\n    var dataObj = JSON.parse(data) \n    var time_step = (new Date()).getSeconds() % locations.length\n\n    if (checkBattery()) {\n      //publish data to topic\n      device.publish(\"body4/\"+topic, data)\n        \n      var batteryDrain = curves.batteryDrainFromRadio(myParams.radioPower)\n      values.push(myParams.battery);\n      drainBattery(batteryDrain)\n      console.log(`[${sensorName}|${myParams.batteryStatus}][sent ${dataObj.metricValue} from ${dataObj.sensor} to ${topic}] battery = ${myParams.battery}, radio power = ${myParams.radioPower}, battery drain (by comms) = ${batteryDrain}`)\n      \n      checkLength(values);\n      \n    }\n    else {\n      console.log(`[${sensorName}|${myParams.batteryStatus}][could not send ${dataObj.metricValue} from ${dataObj.sensor} to ${topic}] Sensor is in power saving mode.`)\n      values.push(0);\n      \n      checkLength(values);\n      \n    }\n  }\n  \nfunction checkLength(values){\n    if(values.length == 50){\n      var plotly = require('plotly')('sakinavohracs','sXtLvtK2wKF59Q62Pqwf');\n      \n      var y_axis = [];\n      for(var i=0;i<values.length;i++){\n        y_axis.push(i);\n      }\n      \n\nvar trace1 = {\n  x: y_axis,\n  y: values,\n  type: \"scatter\"\n};\n\nvar data = trace1;\nvar graphOptions = {filename: \"basic-line\", fileopt: \"overwrite\"};\nplotly.plot(data, graphOptions, function (err, msg) {\n    console.log(msg);\n});\n    }\n    \n  }\n    \n  function drainBattery(value){\n    myParams.battery = myParams.battery - value\n  }\n  \n  function checkBattery(){\n    if(myParams.battery< myParams.batteryCapacity*myParams.batteryCriticalLevel){\n      myParams.batteryStatus = \"critical\"\n      return false\n    }\n    else {\n      var time_step = (new Date()).getSeconds() % locations.length\n      \n      if(myParams.battery< myParams.batteryCapacity*myParams.batteryWarningLevel){\n        myParams.batteryStatus = \"warning\"\n        var closestSensor = utils.getClosestSensor(sensorName, locations[time_step])\n        topic = closestSensor\n      } \n      else {\n        myParams.batteryStatus = \"normal\"\n        //send directly to sink\n        topic = \"sink\"\n      }\n      \n      var distFromDest = utils.getDistance(locations[time_step][sensorName], locations[time_step][topic])\n      myParams.radioPower = curves.distToRadioPower(distFromDest)\n      return true\n    }\n  }\n  \n  async function read(){\n    var interval = setInterval(() => {\n      reading = datagenerator[myParams.metric](reading);\n      //console.log(`[${sensorName}] read ${reading}`)\n      \n      drainBattery(myParams.baseBatteryDrain);\n      \n      //recharge\n      myParams.battery = Math.min(myParams.battery + chargers[myParams.chargerType](myParams.batteryCapacity), myParams.batteryCapacity)\n      \n    }, myParams.readInterval);\n   \n    setTimeout(() => {\n      clearInterval(interval);\n    }, simTime);\n  }\n  \n  async function sendReading(){\n    var interval = setInterval(() => {\n      var message = {}\n      message[\"sensor\"] = sensorName\n      message[\"metric\"] = myParams.metric\n      message[\"metricValue\"] = reading\n      message[\"person\"] = \"Sakina\"\n      \n      send(JSON.stringify(message))\n    }, myParams.sendInterval);\n   \n    setTimeout(() => {\n      clearInterval(interval);\n      //device.close()\n    }, simTime);\n  }\n}\n\n\n","undoManager":{"mark":-1,"position":-1,"stack":[]},"ace":{"folds":[],"scrolltop":687,"scrollleft":0,"selection":{"start":{"row":43,"column":9},"end":{"row":43,"column":9},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":37,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1574338862478}