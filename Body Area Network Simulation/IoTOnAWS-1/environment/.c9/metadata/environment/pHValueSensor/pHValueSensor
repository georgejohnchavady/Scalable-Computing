{"changed":true,"filter":false,"title":"pHValueSensor","tooltip":"/pHValueSensor/pHValueSensor","value":"","undoManager":{"mark":0,"position":5,"stack":[[{"start":{"row":0,"column":0},"end":{"row":128,"column":0},"action":"insert","lines":["// Require AWS IoT Device SDK","const awsIoT = require('aws-iot-device-sdk');","","// Require crypto for random numbers generation","const crypto = require('crypto');","","// Load the endpoint from file","const endpointFile = require('/home/ec2-user/environment/endpoint.json');","","// Fetch the deviceName from the folder name","const deviceName = __dirname.split('/').pop();","","// Topic names to subscribe too.","const scalable = 'scalable/';","const sinkTopic = scalable + 'sink/';","","// Create the thingShadow object with argument data","const device = awsIoT.device({","   keyPath: 'private.pem.key',","  certPath: 'certificate.pem.crt',","    caPath: '/home/ec2-user/environment/root-CA.crt',","  clientId: deviceName,","      host: endpointFile.endpointAddress","});","","var battery;","var isCharging = false;","","// Function that gets executed when the connection to IoT is established","device.on('connect', function() {","    console.log('Connected to AWS IoT');","    battery = 100.0;","","    // subscribing to 'scalable/sink/insulin-sensor'","    device.subscribe(sinkTopic + deviceName);","","    // Start the publish loop","    infiniteLoopPublish();","});","","// Function to update battery status","function updateBatteryStatus(dischargeRate, isCharging) {","    if(isCharging) {","        if(battery >= 100.0) {","            console.log('battery fully charged!');","        } else {","            battery+=1.0;","        }","    } else {","        if(battery <= 0.0) {","            console.log('battery fully discharged! shutting down device!');","        } else {","            battery-=dischargeRate;","        }","    }","}","","// TODO change the timeOut and dischargeRate after testing to proper values!","// Function sending sensor telemetry data every 5 seconds","function infiniteLoopPublish() {","    var timeOut;","    var dischargeRate;","    var topic = scalable + deviceName;","","    console.log('Battery of ' + deviceName + ' is ' + battery + '%');","    if(battery >= 25) {","        timeOut = 5000;","        dischargeRate = 1;","    } else if(battery < 25) {","        timeOut = 2000;","        dischargeRate = 0.4;","    }","","    console.log('Sending sensor telemetry data to AWS IoT for ' + deviceName);","    // Publish sensor data to scalable/insulin-sensor topic with getSensorData","    var data = JSON.stringify(getSensorData(deviceName));","","    device.publish(topic, data);","    publishToSink(sinkTopic, data);","","    updateBatteryStatus(dischargeRate, isCharging);","    // Start Infinite Loop of Publish every \"timeOut\" seconds","    setTimeout(infiniteLoopPublish, timeOut);","}","","// Function to create a random float between minValue and maxValue","function randomFloatBetween(minValue,maxValue){","    return parseInt(Math.floor(Math.min(minValue + (Math.random() * (maxValue - minValue)),maxValue)));","}","","// Generate random sensor data based on the deviceName","function getSensorData(deviceName) {","    let message = {","        'glucose-level': randomFloatBetween(3.9, 7.1)","    };","    ","    const device_data = { ","        'glucoseSensor': {","            'latitude':39.122229,","            'longitude':-77.133578","        }","    };","  ","    message['battery'] = battery;","    message['latitude'] = device_data[deviceName].latitude;","    message['longitude'] = device_data[deviceName].longitude;","    message['device'] = deviceName;","    message['datetime'] = new Date().toISOString().replace(/\\..+/, '');","    ","    return message;","}","","device.on('message', function(topic, message) {","    console.log(\"Message Received on Topic: \" + topic + \": \" + message);","    if(sinkTopic + deviceName == topic) {","        if(message == 'true') {","            isCharging = true;","        } else if (message == 'false') {","            isCharging = false;","        } else {","            console.log('Unknown value for charger status! not modifying the exisiting value!');","        }","    }","});","","function publishToSink(topic, payload) {","    device.publish(topic, payload);","}",""],"id":1}],[{"start":{"row":93,"column":9},"end":{"row":93,"column":22},"action":"remove","lines":["glucose-level"],"id":2},{"start":{"row":93,"column":9},"end":{"row":93,"column":10},"action":"insert","lines":["p"]},{"start":{"row":93,"column":10},"end":{"row":93,"column":11},"action":"insert","lines":["H"]},{"start":{"row":93,"column":11},"end":{"row":93,"column":12},"action":"insert","lines":["V"]},{"start":{"row":93,"column":12},"end":{"row":93,"column":13},"action":"insert","lines":["a"]},{"start":{"row":93,"column":13},"end":{"row":93,"column":14},"action":"insert","lines":["l"]},{"start":{"row":93,"column":14},"end":{"row":93,"column":15},"action":"insert","lines":["u"]},{"start":{"row":93,"column":15},"end":{"row":93,"column":16},"action":"insert","lines":["e"]}],[{"start":{"row":97,"column":9},"end":{"row":97,"column":22},"action":"remove","lines":["glucoseSensor"],"id":3},{"start":{"row":97,"column":9},"end":{"row":97,"column":10},"action":"insert","lines":["p"]},{"start":{"row":97,"column":10},"end":{"row":97,"column":11},"action":"insert","lines":["H"]},{"start":{"row":97,"column":11},"end":{"row":97,"column":12},"action":"insert","lines":["v"]},{"start":{"row":97,"column":12},"end":{"row":97,"column":13},"action":"insert","lines":["a"]}],[{"start":{"row":97,"column":13},"end":{"row":97,"column":14},"action":"insert","lines":["l"],"id":4}],[{"start":{"row":97,"column":13},"end":{"row":97,"column":14},"action":"remove","lines":["l"],"id":5},{"start":{"row":97,"column":12},"end":{"row":97,"column":13},"action":"remove","lines":["a"]},{"start":{"row":97,"column":11},"end":{"row":97,"column":12},"action":"remove","lines":["v"]}],[{"start":{"row":97,"column":11},"end":{"row":97,"column":12},"action":"insert","lines":["V"],"id":6},{"start":{"row":97,"column":12},"end":{"row":97,"column":13},"action":"insert","lines":["a"]},{"start":{"row":97,"column":13},"end":{"row":97,"column":14},"action":"insert","lines":["l"]},{"start":{"row":97,"column":14},"end":{"row":97,"column":15},"action":"insert","lines":["u"]},{"start":{"row":97,"column":15},"end":{"row":97,"column":16},"action":"insert","lines":["e"]},{"start":{"row":97,"column":16},"end":{"row":97,"column":17},"action":"insert","lines":["S"]},{"start":{"row":97,"column":17},"end":{"row":97,"column":18},"action":"insert","lines":["e"]},{"start":{"row":97,"column":18},"end":{"row":97,"column":19},"action":"insert","lines":["n"]},{"start":{"row":97,"column":19},"end":{"row":97,"column":20},"action":"insert","lines":["s"]}],[{"start":{"row":97,"column":20},"end":{"row":97,"column":21},"action":"insert","lines":["o"],"id":7},{"start":{"row":97,"column":21},"end":{"row":97,"column":22},"action":"insert","lines":["r"]}]]},"ace":{"folds":[],"scrolltop":1221.390625,"scrollleft":0,"selection":{"start":{"row":97,"column":20},"end":{"row":97,"column":20},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":82,"state":"start","mode":"ace/mode/text"}},"timestamp":1574173354243}